"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_plugin_1 = require("./plugins/express-plugin");
var utils_1 = require("./utils");
var http_connector_1 = require("./http-connector");
var POLL_INTERVAL_MS = 5000;
var UP9Monitor = /** @class */ (function () {
    function UP9Monitor(options) {
        var _this = this;
        var _a, _b;
        this.poll = function () { return __awaiter(_this, void 0, void 0, function () {
            var state, _a, e_1;
            var _this = this;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 6, , 7]);
                        return [4 /*yield*/, this.httpConnector.postTappingSource(this.tappingSourceId)];
                    case 1:
                        _c.sent();
                        return [4 /*yield*/, this.httpConnector.getTappingState()];
                    case 2:
                        state = _c.sent();
                        this.ownState = state.filter(function (s) { return s.id == _this.tappingSourceId; })[0];
                        if (!(((_b = this.ownState) === null || _b === void 0 ? void 0 : _b.shouldTap) && this.ownState.model)) return [3 /*break*/, 4];
                        _a = this;
                        return [4 /*yield*/, this.httpConnector.getModelBlacklist(this.ownState.model)];
                    case 3:
                        _a.blacklist = _c.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        this.blacklist = [];
                        _c.label = 5;
                    case 5:
                        if (this.isDebug)
                            console.log("blacklist = " + this.blacklist);
                        return [3 /*break*/, 7];
                    case 6:
                        e_1 = _c.sent();
                        if (this.isDebug)
                            console.error("error polling", e_1);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        }); };
        this.sendMessage = function (message) { return __awaiter(_this, void 0, void 0, function () {
            var e_2;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 4, , 5]);
                        if (!(((_a = this.ownState) === null || _a === void 0 ? void 0 : _a.shouldTap) && this.ownState.model)) return [3 /*break*/, 3];
                        message = this.replaceOverridenUrlsInMessage(message);
                        if (!!this.isRequestUrlBlacklisted(message.request.request_url)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.httpConnector.sendTrafficMessage(this.ownState.model, message)];
                    case 1:
                        _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        if (this.isDebug)
                            console.log("ignoring blacklisted request to " + message.request.request_url);
                        _b.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        e_2 = _b.sent();
                        if (this.isDebug)
                            console.error("error sending message to dumper", e_2, message, this.ownState);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        this.isRequestUrlBlacklisted = function (url) {
            var _a;
            for (var _i = 0, _b = (_a = _this.blacklist) !== null && _a !== void 0 ? _a : []; _i < _b.length; _i++) {
                var blacklistRegex = _b[_i];
                try {
                    if (url.match(blacklistRegex)) {
                        return true;
                    }
                }
                catch (e) {
                    if (_this.isDebug)
                        console.error("encountered bad blacklist regex: " + blacklistRegex, e);
                }
            }
            return false;
        };
        this.express = function () {
            return express_plugin_1.getExpressMiddleware(_this.sendMessage, _this.serviceName);
        };
        this.requestLogger = function (httpModule, protocol) {
            var original = httpModule.request;
            httpModule.request = function (request, callback) {
                var startUnixTimestamp = +new Date();
                return original(request, function (response) {
                    try {
                        var body_1 = "";
                        response.on('readable', function () {
                            body_1 += response.read();
                        });
                        response.on('end', function () {
                            var requestDuration = (+new Date()) - startUnixTimestamp;
                            _this.processOutgoingMessage(request, response, body_1, protocol, startUnixTimestamp, requestDuration);
                        });
                    }
                    catch (e) {
                        if (_this.isDebug)
                            console.error("error while sending outbound request", e);
                    }
                    if (callback)
                        callback(response);
                });
            };
        };
        this.processOutgoingMessage = function (request, response, responseBody, protocol, startUnixTimestamp, requestDuration) {
            var url = "";
            if (request.protocol)
                url = request.protocol + "//" + request.hostname + request.path;
            else {
                url = request.href;
            }
            if (url.indexOf(_this.env) == -1) {
                var requestHeaders = __assign({}, request.headers);
                requestHeaders[':method'] = request.method;
                requestHeaders[':path'] = request.path;
                requestHeaders[':authority'] = request.hostname;
                requestHeaders[':scheme'] = protocol;
                requestHeaders['x-up9-destination'] = _this.serviceName;
                var requestBody = request.body;
                var message = {
                    request: {
                        headers: utils_1.lowerCaseObjectKeys(requestHeaders),
                        body: {
                            "truncated": false,
                            "as_bytes": requestBody ? Buffer.from(requestBody).toString('base64') : ""
                        },
                        request_url: url,
                        hostname: request.hostname,
                        started_at_unix: startUnixTimestamp / 1000
                    },
                    response: {
                        headers: utils_1.lowerCaseObjectKeys(__assign(__assign({}, response.headers), { ":status": response.statusCode.toString(), 'duration_ms': requestDuration.toString() })),
                        body: {
                            "truncated": false,
                            "as_bytes": responseBody ? Buffer.from(responseBody).toString('base64') : ""
                        },
                        duration_ms: requestDuration,
                        hostname: _this.serviceName
                    },
                };
                _this.sendMessage(message);
            }
        };
        this.env = options.up9Server;
        this.serviceName = options.serviceName;
        this.tappingSourceId = "nodejs-" + this.serviceName;
        this.httpConnector = new http_connector_1.UP9HttpConnector(this.env, options.clientId, options.clientSecret);
        this.isDebug = (_a = options.isDebug) !== null && _a !== void 0 ? _a : false;
        this.hostnameOverrides = (_b = options.hostnameOverrides) !== null && _b !== void 0 ? _b : {};
        setInterval(this.poll, POLL_INTERVAL_MS);
        this.requestLogger(require("http"), "http");
        this.requestLogger(require("https"), "https");
    }
    UP9Monitor.prototype.replaceOverridenUrlsInMessage = function (message) {
        var _a;
        var requestOverrideHostname = this.hostnameOverrides[message.request.hostname];
        if (requestOverrideHostname) {
            message.request.hostname = requestOverrideHostname;
            var parsedUrl = new URL(message.request.request_url);
            parsedUrl.hostname = requestOverrideHostname;
            message.request.request_url = parsedUrl.href;
        }
        message.response.hostname = (_a = this.hostnameOverrides[message.response.hostname]) !== null && _a !== void 0 ? _a : message.response.hostname;
        return message;
    };
    return UP9Monitor;
}());
module.exports = function (options) { return new UP9Monitor(options); };
