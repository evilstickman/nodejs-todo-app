"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExpressMiddleware = void 0;
var utils_1 = require("../utils");
function getResponseHeaders(responseHeaderString) {
    var headers = {};
    var splitHeaderString = responseHeaderString.split("\r\n");
    for (var _i = 0, _a = splitHeaderString.slice(1, splitHeaderString.length); _i < _a.length; _i++) {
        var headerPairString = _a[_i];
        var _b = headerPairString.split(": "), headerName = _b[0], headerValue = _b[1];
        if (headerName)
            headers[headerName] = headerValue;
    }
    return headers;
}
var extractUp9MessageFromExpress = function (req, res, responseContents, serviceName, startUnixTimestamp, requestDurationMs) {
    var reqHeaders = __assign({}, req.headers);
    reqHeaders[':method'] = req.method;
    reqHeaders[':path'] = req.path;
    reqHeaders[':authority'] = req.hostname;
    reqHeaders[':scheme'] = req.protocol;
    reqHeaders['x-up9-destination'] = serviceName;
    var resHeaders = getResponseHeaders(res._header);
    resHeaders[':status'] = res.statusCode.toString();
    resHeaders['duration_ms'] = requestDurationMs.toString();
    return {
        request: {
            headers: utils_1.lowerCaseObjectKeys(reqHeaders),
            body: {
                "truncated": false,
                "as_bytes": req.body ? Buffer.from(JSON.stringify(req.body)).toString('base64') : ""
            },
            request_url: req.protocol + "://" + serviceName + req.originalUrl,
            hostname: serviceName,
            started_at_unix: startUnixTimestamp / 1000
        },
        response: {
            headers: utils_1.lowerCaseObjectKeys(resHeaders),
            body: {
                "truncated": false,
                "as_bytes": responseContents
            },
            duration_ms: requestDurationMs,
            hostname: ""
        },
    };
};
var sendToUp9 = function (req, res, responseContents, onRequestCallback, serviceName, startUnixTimestamp, requestDurationMs) {
    var message = extractUp9MessageFromExpress(req, res, responseContents, serviceName, startUnixTimestamp, requestDurationMs);
    onRequestCallback(message);
};
exports.getExpressMiddleware = function (onRequestCallback, serviceName) {
    return function (req, res, next) {
        var original_write = res.write;
        var original_end = res.end;
        var chunks = [];
        var startUnixTimestamp = +new Date();
        res.write = function (chunk) {
            chunks.push(chunk);
            original_write.apply(res, arguments);
        };
        res.end = function (chunk) {
            var requestDurationMs = (+new Date()) - startUnixTimestamp;
            if (chunk)
                chunks.push(chunk);
            original_end.apply(res, arguments);
            try {
                var responseContents = void 0;
                if (chunks.length > 0 && typeof chunks[0] == 'string') {
                    responseContents = Buffer.from(chunks.join("")).toString('base64');
                }
                else {
                    responseContents = Buffer.concat(chunks).toString('base64');
                }
                sendToUp9(req, res, responseContents, onRequestCallback, serviceName, startUnixTimestamp, requestDurationMs);
            }
            catch (error) {
                console.error('error sending to up9', error);
            }
        };
        next();
    };
};
